$(function() {
    class Copyright {
        constructor() {
            console.log("Copyright @ Uni-Minds 2019-2022");
        }

        init() {
            $.get("/api/v1/raw?action=getversion").done(resp => {
                if (resp.code === 200) {
                    $(".main-footer").html(resp.data);
                }
            })
        }
    }
    class Menu {
        constructor(props) {
            this.root = $(".mt-2 .nav");

        }

        init() {
            $.get("/api/v1/user?action=getrealname", result => {
                if (result.code === 200) {
                    this.username = result.data
                } else {
                    this.username = null;
                }
            });
            $.get("/api/v1/raw?action=getmenujson", result => {
                if (result.code === 200) {
                    this.menudata = result.data;
                    if (typeof(navMenuActive)!='undefined') {
                        this.active = navMenuActive
                    } else {
                        // setTimeout(menuCreate, 3000);
                        console.log("menu time out")
                    }
                }
            });
        }

        loadData(menuJson) {
            for (let i = 0; i < menuJson.length; i++) {
                let menu = menuJson[i];
                if (menu.child && menu.child.length > 0) {
                    let parent = this.parent(menu.name, menu.icon);
                    let tree = $('<ul class="nav nav-treeview"></ul>');
                    parent.append(tree);
                    this.root.append(parent);

                    let childlen = menu.child.length;
                    for (let j = 0; j < childlen; j++) {
                        let child = menu.child[j];
                        let obj = this.child(child.id, child.name, child.icon, child.controller);
                        tree.append(obj);
                    }
                } else {
                    let obj = this.child(menu.id, menu.name, menu.icon, menu.controller);
                    this.root.append(obj);
                }
            }
        }

        parent(name, icon) {
            return $('<li class="nav-item has-treeview"><a href="#" class="nav-link"><i class="nav-icon ' +
                icon + '"></i>' +
                '<p>' + name + '<i class="right fas fa-angle-left"></p></i></a></li>');
        }

        child(id, name, icon, controller) {
            if (id == null) {
                return $('<li class="nav-item"><a href="' +
                    controller + '" class="nav-link"><i class="nav-icon ' +
                    icon + '"></i><p>' +
                    name + '</p></a>');
            } else {
                return $('<li class="nav-item"><a id="' +
                    id + '" href="' +
                    controller + '" class="nav-link"><i class="nav-icon ' +
                    icon + '"></i><p>' +
                    name + '</p></a>');
            }
        }

        set username(u) {
            let obj = $('.sidebar .info .d-block');
            if (u) {
                obj.attr('href', '/logout').text(u);
            } else {
                obj.attr("href", "#").text("未知用户")
            }
        }

        set menudata(d) {
            this.loadData(d)
        }

        set active(id) {
            if (this.activeRef) {
                this.activeRef.removeClass("active")
            }
            let obj = $(`#${id}`);
            if (obj.length) {
                obj.addClass("active");
                let objParent = obj.parents()[2];
                if ($.nodeName(objParent, "li")) {
                    $(objParent).addClass("menu-open");
                }
                this.activeRef = obj
            }
        }
    }
    let menu = new Menu()
    let cr = new Copyright()
    menu.init()
    cr.init()
});

function analysisURL(href) {
    let url ={};
    let data = href.split('?')[1].split('&');
    data.forEach(e=>{
        let p=e.split('=');
        url[p[0]]=p[1];
    });
    return url
}

function sidebar(action) {
    switch (action) {
        case "open":
        case true:
        case 2:
            $(document.body).addClass("sidebar-mini").removeClass("sidebar-collapse")
            break

        case "close":
        case false:
        case 1:
            $(document.body).addClass("sidebar-mini sidebar-collapse")
            break

        case "hide":
        case 0:
            $(document.body).removeClass("sidebar-mini").addClass("sidebar-collapse")
            break
    }
}


function UrlDataGet(url) {
    return new Promise((resolve, reject) => {
        $.get(url, html => {
            resolve(html)
        })
    })
}


if (!!navMenuStatus) {
    sidebar(navMenuStatus);
}

